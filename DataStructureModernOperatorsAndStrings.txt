Destructuring of array : It is a method of breaking down arrays into smaller unit
const arr1 = [2, 3, [4, 5]];
const [x, , [y, z]] = arr1;
console.log(x, y, z);
--------------------------------------------------------------------------------------------------------------
Destructuring of object : The properties in LHS should have the same name as RHS
const {name,openingHours, category} = restaurant

O/p : will have the name, openingHours object and the category array

The order will not matter but the name present in the object has to be the same
If we have to rename the properties, it can be done as below :

const {name:restaurantName, openingHours :hours,category:restaurantCategory} = restaurant 
--------------------------------------------------------------------------------------------------------------
Destructuring of Nested Object

const {sat} = openingHours;
console.log(sat);

o/p : {open: 0, close: 24}


const {sat: { open, close }} = openingHours;
console.log(open, close);

o/p : 7,14
--------------------------------------------------------------------------------------------------------------
Spread Operator : Add elements to an array
const arr = [7, 8, 9];
const newArr = [1,2,3, ...arr];
console.log(newArr); // [1,2,3,7,8,9]

--------------------------------------------------------------------------------------------------------------
Spread Operator can be used for "MERGING ARRAY" AND "CREATING SHALLOW COPIES"
const mainMenuCopy = [...restaurant.mainMenu];
console.log(mainMenuCopy);


// Join 2 or more arrays

const arr3 = [1, 2, 3];
const arr4 = [4, 5, 6];
const newJoinedArr = [...arr3, ...arr4];
console.log(newJoinedArr);
--------------------------------------------------------------------------------------------------------------
Iterables are arrays, strings, maps and NOT Objects
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------