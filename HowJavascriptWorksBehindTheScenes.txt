ProtoTyping : In JS, there is a prototype Ex. Array has a prototype with a list of all properties and methods.
Then using this prototype, objects are created in JS
----------------------------------------------------------------------------------------------------------------------
First-class function : A function in which we treat functions just like variables. Ex. pass function into another function
  function closeModal() {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  }
  close.addEventListener('click', closeModal);
----------------------------------------------------------------------------------------------------------------------
  Javascript runs on single thread and hence can perform only 1 task at a time
----------------------------------------------------------------------------------------------------------------------
  Eventloop : It takes a long running tasks, executes them in the background and puts them in the main thread once it completes
----------------------------------------------------------------------------------------------------------------------
  Every browser has a Javascript engine.
  Chrome has v8 engine which helps in running Javascript on browser
  ----------------------------------------------------------------------------------------------------------------------
  Javascript engine has 2 parts :
  1. Call Stack : Call Stack is where execution happens. It has an execution context
  2. Heap       : Heap is where objects are stored
----------------------------------------------------------------------------------------------------------------------
  Current Javascript is not an interpreted language anymore.
  It makes use of JIT - Just-In-Time compilation. Entire code is converted into machine code and executed at once
  ----------------------------------------------------------------------------------------------------------------------
  Code -> Parser(Read the code and create AST - Abstract Syntax tree) -> 
  Compilation (Takes AST and converts in machine code)-> Execution (Machine code is executed)

  Execution happens in the callstack
  The machine code is optimized and again sent to compiler and gets a more optimized machine code.
  This can happen several times and then less optimzed code is replaced with a more optimzed code
  ----------------------------------------------------------------------------------------------------------------------
  We have 3 components in a Javascript runtime :
  1. Javascript engine :  This will be used to Parse -> Compile and Execute Javascript
  2. Web APIs          :  DOM elements, Timers are part of this.
  3. Callback queue    :  Any function that needs to be executed will be present here.
                          When a function has to be executed, then the function is sent to call stack by event loop.
----------------------------------------------------------------------------------------------------------------------
After the code is complied and ready to be executed. a global execution-context for top-level code is created
Execution of top-level code happens
Then the execution of function happens. Every function has its own "execution-context"
----------------------------------------------------------------------------------------------------------------------
What is inside of Execution context ?
1. Variable environment 
    let, const, variables
    functions
    arguments objects

2. Scope chain

3. "this" keyword
----------------------------------------------------------------------------------------------------------------------
Call Stack : It has a collection of execution context
----------------------------------------------------------------------------------------------------------------------
Scoping : How is our program's variable organized and accessed. "Where do variables live" ? or "Whre can we access a certain variable and where not"
----------------------------------------------------------------------------------------------------------------------
3 Types of scope :
Global Scope   : Outside of any function or block
Function Scope : Inside a function, Also called local scope. "var" is function scope
Block Scope    : Variables accessed only inside a block.  "let" and "const" are blocked scope

If a variable is not available, it will look in the parent scope
----------------------------------------------------------------------------------------------------------------------
Hoisting : Makes some types of variables accessible/usable in the code before they are actually declared. "Variables lifted to the top of their scope"
----------------------------------------------------------------------------------------------------------------------
"this" keyword/variable : Special variable that is created for every execution context (every function)
Takes the value of (points to) the "owner" of the function in which the "this" keyword is used

Method : Object that is calling the methods
Arrow  : "this" points to the surrounding function since arrow does not own
Event listerner : "this" points to DOM
----------------------------------------------------------------------------------------------------------------------
const calcAge2 = function (birthYear) {
  console.log(2037 - birthYear);
  console.log(this); // undefined since calcAge2() is not tied to any object
};

calcAge2(1989);

const calcAgeArrow = birthYear => {
  console.log(2037 - birthYear);
  console.log(this);
};

calcAgeArrow(1988) // this will give the "this" as window since arrow function does not have its own this and point to its parent

const jonas = {
  name: 'Jonas',
  age: '34',
  calcAge: function () {
    console.log(this);
  },
};

jonas.calcAge(); // this will print jonas object since it is tied to an object
----------------------------------------------------------------------------------------------------------------------
const addExpr = function(a,b){
  console.log(arguments) 
}

addExpr(1,2) // This will print 1,2
addExpr(1,2,3,4) // This will print 1,2,3,4 