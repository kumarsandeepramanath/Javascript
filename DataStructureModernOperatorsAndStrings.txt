Destructuring of array : It is a method of breaking down arrays into smaller unit
const arr1 = [2, 3, [4, 5]];
const [x, , [y, z]] = arr1;
console.log(x, y, z);
IF THERE IS AN ARRAY ON THE LEFT side of '=', then it is destructuring AN ARRAY.

We can recieve 2 values from a function from an array and assign at once using destructuring operator
--------------------------------------------------------------------------------------------------------------
Destructuring of object : The PROPERTIES NAME OF OBJECTS in LHS should have the same name as RHS
const {name,openingHours, category} = restaurant

O/p : will have the name, openingHours object and the category array

The order will not matter but the name present in the object has to be the same
If we have to rename the properties, it can be done as below :

const {name:restaurantName, openingHours :hours,category:restaurantCategory} = restaurant 

IF THERE IS AN OBJECT ON THE LEFT side of '=', then it is destructuring AN OBJECT.
--------------------------------------------------------------------------------------------------------------
Destructuring of Nested Object

const {sat} = openingHours;
console.log(sat);

o/p : {open: 0, close: 24}


const {sat: { open, close }} = openingHours;
console.log(open, close);

o/p : 7,14
--------------------------------------------------------------------------------------------------------------
Spread Operator : Add elements to an array
const arr = [7, 8, 9];
const newArr = [1,2,3, ...arr];
console.log(newArr); // [1,2,3,7,8,9]

SPREAD OPERATOR is on the RIGHT SIDE OF '='

Spread operator helps in getting the elements of the array individually
Ex. myArr = [1,2,3,4,5]
console.log(myArr) o/p => [1,2,3,4,5]
console.log(...myArr) o/p => 1,2,3,4,5

--------------------------------------------------------------------------------------------------------------
Spread Operator can be used for "MERGING ARRAY" AND "CREATING SHALLOW COPIES"

// Merging Array
const mainMenuCopy = [...restaurant.mainMenu];
console.log(mainMenuCopy);


// Join 2 or more arrays
// Shallow Copy
const arr3 = [1, 2, 3];
const arr4 = [4, 5, 6];
const newJoinedArr = [...arr3, ...arr4];
console.log(newJoinedArr);
--------------------------------------------------------------------------------------------------------------
Iterables are arrays, strings, maps and NOT Objects
With SPREAD operator, we can make copies of the Objects
const restaurantCopy = {...restaurant}
restaurantCopy.name = 'Fresh name'
console.log(restaurantCopy.name) // Fresh name
console.log(restaurantCopy.name) // Old name
--------------------------------------------------------------------------------------------------------------
Spread : It is used to unpack elements from an array . It is present on ehe RIGHT side of =
Rest   : It is use to pack elements into an array. It does the opposite of SPREAD.  It is present on the LEFT side of =. REST should be the last ement on the left of the = operator

--------------------------------------------------------------------------------------------------------------
// Rest is the opposite of Spread operator
const myArray1 = [1, 2, 3, 4, 5];
const [g, h, ...others] = myArray1;

console.log(g, h, others); o/p => 1,2,[3,4,5]
--------------------------------------------------------------------------------------------------------------
///Function with variable number of arguments
function add(...numbers) {
  console.log(numbers);
}

add(1, 2);
add(1, 2, 3, 4);
add(1, 2, 3, 4, 5, 6, 7, 8, 9);
--------------------------------------------------------------------------------------------------------------
Short-circuiting:
console.log(undefined || 0 || '' || 'Hello' || 23);
//o/p => Hello , since it is the first truthy value
--------------------------------------------------------------------------------------------------------------
//Nullish:  null and undefined
restaurant.guessNum = 0;
const guessCorrect = restaurant.guessNum ?? 10;
console.log(guessCorrect); o/p =>0 since there is a ?? operator
--------------------------------------------------------------------------------------------------------------
for-of loop is used instead of the traditional for-loop
for (const item of menu)
console.log(item)

Get the index of for-of loop
for (const item of menu.entries()) console.log(item);
--------------------------------------------------------------------------------------------------------------
?. operator is used to check if a property exists.
It will otherwise give an unefined.

console.log(restaurant.openingHours.mon?.openingHours);
--------------------------------------------------------------------------------------------------------------
Optional Chaining is used along with Nullish coalison operator

console.log(users[0]?.name ?? 'User Array Empty')
OTHERWISE 
if(users.length >0)
console.log(users[0].name)
else
console.log('Users Array Empty')
--------------------------------------------------------------------------------------------------------------
**Looping Objects with Object.keys()**

for (const days of Object.keys(restaurant.openingHours)) console.log(days);
--------------------------------------------------------------------------------------------------------------
** Looping Objects with Object.values()**
for (const values of Object.values(restaurant.openingHours))
  console.log(values);
--------------------------------------------------------------------------------------------------------------
** Printing the entire Object**
for(const x in Object.entries(restaurant.openingHours))
console.log(x) // THIS WILL GIVE KEY + VALUES
--------------------------------------------------------------------------------------------------------------
Index + Item
for (const [index, item] of game2.scored.entries())
  console.log(`Goal ${index + 1}: ${item}`);
--------------------------------------------------------------------------------------------------------------
If an object has 2 properties, then instead of using [0],[1], better to destructure and use it in for loop
for (const [item, odd] of Object.entries(game2.odds)) {
  let teamName = game[item] || 'draw'; // let teamName = game2[item[0]] || 'draw';
  let teamPoints = odd;                // let teamPoints = odd;
  console.log(`Odd of victory ${teamName} : ${teamPoints}`);
}
--------------------------------------------------------------------------------------------------------------
SETS
----
orderedSets.size | This is used to get the length of a set
orderedSets.has('Pizza') //True or False depending on whether the element is present or not

const staff = ['waiter', 'chef', 'waiter', 'master'];
const uniqueSet = new Set(staff);
console.log(uniqueSet);

const uniqueSetAsArray = [...new Set(staff)];
console.log('Set - After removing the details of an Array. Created with a new Set()')
console.log(uniqueSetAsArray);
--------------------------------------------------------------------------------------------------------------
Maps: Stores Key-Value pair

const rest = new Map();
rest.set('name', 'Classic Italiano');
rest.set(1, 'Firenze, I
Arrays vs SETS
Arrays : Use when you need ordered list of values
         Use when you want to manipulate Data

Sets   : Use when you want unique value
         Using of set yields in high performance
         Use when you want to remove duplicates  
--------------------------------------------------------------------------------------------------------------
OBJECTS vs MAP
Objects : More traditional way of working with key
Maps    : Have higher performance
--------------------------------------------------------------------------------------------------------------taly');
console.log(rest.set(2, 'Lisbon, Portugal'));

// GET AN ELEMENT FROM THE MAP
console.log(rest.get('name'))

//Convert Object to Map
const hoursMap = new Map(Object.entries(openingHours));
--------------------------------------------------------------------------------------------------------------
// Types of DataStructures 

Array
Set
Map
Object
--------------------------------------------------------------------------------------------------------------
Arrays vs SETS
Arrays : Use when you need ordered list of values
         Use when you want to manipulate Data

Sets   : Use when you want unique value
         Using of set yields in high performance
         Use when you want to remove duplicates  
--------------------------------------------------------------------------------------------------------------
OBJECTS vs MAP
Objects : More traditional way of working with key
Maps    : Have higher performance
--------------------------------------------------------------------------------------------------------------
STRINGS
=======

const airline = 'TAP Air Portugal';
console.log(airline.indexOf('A')); // 1 - This lets us find an element at a position
console.log(airline.slice(4)); // Air Portugal - The number of 4 will be the start index
console.log(airline.slice(4, 7)); // Air - slice(startIndex,endIndex). ** endIndex - startIndex = length of string
console.log(airline.slice(1, -1)); // AP Air Portuga - startIndex = 1 and endIndex = -1. So -1 removes last value
const announcement = 'All passenger come to room 23, room 23 please';
console.log(announcement.replaceAll('room', 'gate')); //replaces all occourance
console.log(airline.includes('Portugal')); // Returns a Boolean
console.log(airline.split(' ')) // Will split the string into an array based on space
console.log(['Mr', airline.split(' ')[0], airline.split(' ')[1]].join('---')); //Join does a reverse of split
console.log('jonas'.padStart(7, '+')); // Pads the remaining string (7 length in total)

--------------------------------------------------------------------------------------------------------------
String3
--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------
