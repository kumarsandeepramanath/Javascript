Javascript is :
Highlevel                       : We do not write machine code
Garbage Collected               : Happens using Javascript engine
Interpreted or JIT complied     : Code is either compiled or Interpreted
Multi-paradigm                  : Prodedural, Functional, Object Oriented
Prototype-based Object Oriented : We create an Array from an Array blueprint
First-class functions           : We treat function as variables( Pass function to method)
Dynamic                         : Dynamically typed
Single Threaded                 : How JS handles multiple tasks at the same time. JS is SINGLE THREADED
Non-blocking event loop         : Concurrent execution happens with event loop - tasks execute in background and puts them to main thread once completed
----------------------------------------------------------------------------------------------------------------------
ProtoTyping : In JS, there is a prototype Ex. Array has a prototype with a list of all properties and methods.
Then using this prototype, objects are created in JS
----------------------------------------------------------------------------------------------------------------------
First-class function : A function in which we treat functions just like variables. Ex. pass function into another function
  function closeModal() {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  }
  close.addEventListener('click', closeModal);
----------------------------------------------------------------------------------------------------------------------
  Javascript runs on single thread and hence can perform only 1 task at a time
  Javascript Engine : It is a program that executes Javascript code
----------------------------------------------------------------------------------------------------------------------
  Eventloop : It takes a long running tasks, executes them in the background and puts them in the main thread once it completes
----------------------------------------------------------------------------------------------------------------------
  Every browser has a Javascript engine.
  Chrome has v8 engine which helps in running Javascript on browser
  ----------------------------------------------------------------------------------------------------------------------
  Javascript engine has 2 parts :
  1. Call Stack : Call Stack is where execution happens. It has an execution context
  2. Heap       : Heap is where objects are stored
----------------------------------------------------------------------------------------------------------------------
Compilation     : Entire code is converted to machine code at once, and written to a Binary file that can be executed by the computer
                  Source Code ->(Step 1) COMPILATION => Portal Machine Code -> (Step 2) EXECUTION => Program running
Interpretation  : Interpreter runs through the Source code and executes line by line
                  Source Code -> EXECUTION LINE BY LINE -> Program running
JIT Compilation : Entire code is converted to machine code at once, then executed immediately
                  Source Code -> COMPILATION =>(Step 1) Machine Code (Not a Portable code) -> (Step 2) Execution (Happens immediately) => Program running
----------------------------------------------------------------------------------------------------------------------
  Current Javascript is not an interpreted language anymore.
  It makes use of JIT - Just-In-Time compilation. Entire code is converted into machine code and executed at once
  ----------------------------------------------------------------------------------------------------------------------
  WHAT HAPPENS INSIDE A JS ENGINE :
  ====

  Code -> Parser(Read the code and create AST - Abstract Syntax tree) -> 
  Compilation (Takes AST and converts in machine code)-> Execution (Machine code is executed)

  Execution happens in the callstack
  The machine code is optimized and again sent to compiler and gets a more optimized machine code.
  This can happen several times and then less optimized code is replaced with a more optimzed code
  ----------------------------------------------------------------------------------------------------------------------
  We have 3 components in a Javascript runtime :
  1. Javascript engine :  This will be used to Parse -> Compile and Execute Javascript
  2. Web APIs          :  DOM elements, Timers are part of this.
  3. Callback queue    :  It is a data-structure which contains all the call back functions that need to be executed.
                          Any function that needs to be executed will be present here.
                          When a function has to be executed, then the function is sent to call stack by event loop.
----------------------------------------------------------------------------------------------------------------------
After the code is complied and ready to be executed. a global execution-context for top-level code is created
Execution of top-level code happens
Then the execution of function happens. Every function has its OWN NEW "execution-context"
Steps :
Compilation
    |
Creation of Global Execution context (For Top Level code)
    |
Execution of Top Level Code (Inside of Global Execution context)
    |
Execution of functions and waiting for Callback functions
----------------------------------------------------------------------------------------------------------------------
What is inside of Execution context ?
1. Variable environment 
    let, const, variables
    functions
    arguments objects

2. Scope chain :  It contains reference to the variables that are present outside of the function

3. "this" keyword
    Arrow functions do not get the this reference
----------------------------------------------------------------------------------------------------------------------
Call Stack : 
=======
It has a collection of execution context. The execution context are stacked on top of each other in order 
             to track where we are on the execution
             The Execution COntext which is on top is the one that is running
----------------------------------------------------------------------------------------------------------------------
Scoping : How is our program's variable organized and accessed. "Where do variables live" ? or "Whre can we access a certain variable and where not"
Lexical Scoping : Scoping is controlled by placement of functions and blocks in a code
----------------------------------------------------------------------------------------------------------------------
3 Types of scope :
Global Scope   : Outside of any function or block
Function Scope : Inside a function, Also called local scope. "var" is function scope. Every function creates its own scope
Block Scope    : Variables accessed only inside a block.  "let" and "const" are blocked scope

If a variable is not available, it will look in the parent scope
----------------------------------------------------------------------------------------------------------------------
Hoisting : Makes some types of variables accessible/usable in the code before they are actually declared. 
"Variables lifted to the top of their scope"

Before execution, code is scanned for variable declarations, and for each variable , 
a new property is created in the variable environment object

Function declarations     : HOISTED  => YES
var variables             : HOISTED  => YES (Initial value = undefined)
let, const variables      : HOISTED  => No  (Reference error)
function expression/arrow : Depends on whether its var or let/const. (Behaves like a variable)

----------------------------------------------------------------------------------------------------------------------
"this" keyword/variable : Special variable that is created for every execution context (every function)
Takes the value of (points to) the "owner" of the function in which the "this" keyword is used

Method          : Object that is calling the methods
Simple Function : "this" =  undefined
Arrow           : "this" points to the surrounding/parent function since arrow does not own
Event listerner : "this" points to DOM element that the handler is attached to
----------------------------------------------------------------------------------------------------------------------
const calcAge2 = function (birthYear) {
  console.log(2037 - birthYear);
  console.log(this); // undefined since calcAge2() is not tied to any object
};

calcAge2(1989);

const calcAgeArrow = birthYear => {
  console.log(2037 - birthYear);
  console.log(this);
};

calcAgeArrow(1988) // this will give the "this" as window since arrow function does not have its own this and point to its parent

const jonas = {
  name: 'Jonas',
  age: '34',
  calcAge: function () {
    console.log(this);
  },
};

jonas.calcAge(); // this will print jonas object since it is tied to an object
----------------------------------------------------------------------------------------------------------------------
const addExpr = function(a,b){
  console.log(arguments) 
}

addExpr(1,2) // This will print 1,2
addExpr(1,2,3,4) // This will print 1,2,3,4 
----------------------------------------------------------------------------------------------------------------------
Every primitive value is stored in the Stack
Primitives : They are stored in the Call Stack

Number
String
Boolean
Undefined
Null
Symbol
BigInt

Objects/ Reference Types :

Object
Array
Functions

Every Reference value is stored in the Heap. But is reference is available in the Stack
----------------------------------------------------------------------------------------------------------------------
Object.assign : This will create a clone of the object which can be changed
const jessicaCopy = Object.assign({}, jessica)
----------------------------------------------------------------------------------------------------------------------
******** const value cannot be changed for PRIMITIVE values ********
******** const value(properties) can be changed for OBJECT/REFERENCE values ********
----------------------------------------------------------------------------------------------------------------------
Primitive and Reference variables are created in STACK
Reference variables are referced from HEAP
let age = 30
let oldAge = age
age = 31
console.log(age)
console.log(oldAge)

const me = {
  name:'Jonas',
  age :'30'
}
const friend  = me
friend.age =27
console.log(me.age) // 27
console.log(friend.age) // 27

Age points to 0001 with value 30
oldAge points to 0001 with value 30
age = 31 , so a new value is created in 0002 with value 31 (value in an Address cannot be changed and hence a new value in new Address is created)
me is created in 0003 and it has a reference in HEAP that has the actual object
fried = me , so friend also points to me. since both are referring to the same object reference, change in 1 changes the value of the other

Identifier   Address   value           Address    Value
=========   =========  =========       =======    ====== 
age         0001        30             D30F       {name: 'Jonas', age:27}
oldAge      0002        31
me          0003        D30F
friend ------^  
----------------------------------------------------------------------------------------------------------------------
const jessicaCopy = Object.assign({}, jessica) // This creates a shallow copy. Only the parent object is copied. It doesnot create a deep copy